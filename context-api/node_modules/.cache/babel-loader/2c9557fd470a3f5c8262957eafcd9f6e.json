{"ast":null,"code":"import _objectSpread from \"/home/howardreith/workspace/redux-demo/context-api/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/howardreith/workspace/redux-demo/context-api/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/howardreith/workspace/redux-demo/context-api/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/howardreith/workspace/redux-demo/context-api/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/howardreith/workspace/redux-demo/context-api/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/howardreith/workspace/redux-demo/context-api/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/howardreith/workspace/redux-demo/context-api/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/howardreith/workspace/redux-demo/context-api/src/AppProvider.js\";\nimport React from 'react';\nimport { emptyBoard, NONE, score } from \"./helpers\";\nexport var AppContext = React.createContext();\n\nvar AppProvider =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AppProvider, _React$Component);\n\n  function AppProvider(props) {\n    var _this;\n\n    _classCallCheck(this, AppProvider);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AppProvider).call(this, props));\n    _this.takeTurn = _this.takeTurn.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      gameBoard: emptyBoard,\n      winner: null,\n      player: 'X',\n      xWins: 0,\n      oWins: 0\n    };\n    return _this;\n  }\n\n  _createClass(AppProvider, [{\n    key: \"takeTurn\",\n    value: function takeTurn(action) {\n      if (this.state.winner || this.state.gameBoard[action.row][action.square] !== NONE) return this.state; // clone the array so we don't mutate the existing state\n\n      var gameBoard = this.state.gameBoard.map(function (r) {\n        return r.slice(0);\n      });\n      gameBoard[action.row][action.square] = this.state.player;\n      var player = this.state.player === 'X' ? 'O' : 'X';\n      var winner = score(gameBoard);\n      var xWins = winner === 'X' ? state.xWins + 1 : state.xWins;\n      var oWins = winner === 'O' ? state.oWins + 1 : state.oWins;\n      return _objectSpread({}, this.state, {\n        player: player,\n        winner: winner,\n        gameBoard: gameBoard,\n        xWins: xWins,\n        oWins: oWins\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(AppContext.Provider, {\n        value: {\n          state: this.state,\n          takeTurn: this.takeTurn\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, this.props.children);\n    }\n  }]);\n\n  return AppProvider;\n}(React.Component); //const defaultState = {\n//   gameBoard: emptyBoard,\n//   winner: null,\n//   player: 'X',\n//   xWins: 0,\n//   oWins: 0,\n// };\n//\n// export default function gameState(state = defaultState, action) {\n//   switch (action.type) {\n//     case TAKE_TURN:\n//       if (state.winner || state.gameBoard[action.row][action.square] !== NONE)\n//         return state;\n//\n//       // clone the array so we don't mutate the existing state\n//       let gameBoard = state.gameBoard.map(r => r.slice(0));\n//       gameBoard[action.row][action.square] = state.player;\n//\n//       const player = state.player === 'X' ? 'O' : 'X';\n//       const winner = score(gameBoard);\n//       const xWins = winner === 'X' ? state.xWins + 1 : state.xWins;\n//       const oWins = winner === 'O' ? state.oWins + 1 : state.oWins;\n//\n//       return {...state, player, winner, gameBoard, xWins: xWins, oWins: oWins};\n//     case RESET_GAME:\n//       return {...state, gameBoard: emptyBoard, winner: null};\n//     default:\n//       return state;\n//   }\n// }\n\n\nexport { AppProvider as default };","map":{"version":3,"sources":["/home/howardreith/workspace/redux-demo/context-api/src/AppProvider.js"],"names":["React","emptyBoard","NONE","score","AppContext","createContext","AppProvider","props","takeTurn","bind","state","gameBoard","winner","player","xWins","oWins","action","row","square","map","r","slice","children","Component"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,UAAR,EAAoBC,IAApB,EAA0BC,KAA1B,QAAsC,WAAtC;AAEA,OAAO,IAAMC,UAAU,GAAGJ,KAAK,CAACK,aAAN,EAAnB;;IAEcC,W;;;;;AACjB,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,qFAAMA,KAAN;AAEA,UAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcC,IAAd,uDAAhB;AAEA,UAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAEV,UADF;AAETW,MAAAA,MAAM,EAAE,IAFC;AAGTC,MAAAA,MAAM,EAAE,GAHC;AAITC,MAAAA,KAAK,EAAE,CAJE;AAKTC,MAAAA,KAAK,EAAE;AALE,KAAb;AALe;AAYlB;;;;6BAGQC,M,EAAQ;AACb,UAAI,KAAKN,KAAL,CAAWE,MAAX,IAAqB,KAAKF,KAAL,CAAWC,SAAX,CAAqBK,MAAM,CAACC,GAA5B,EAAiCD,MAAM,CAACE,MAAxC,MAAoDhB,IAA7E,EACI,OAAO,KAAKQ,KAAZ,CAFS,CAIb;;AACA,UAAIC,SAAS,GAAG,KAAKD,KAAL,CAAWC,SAAX,CAAqBQ,GAArB,CAAyB,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,KAAF,CAAQ,CAAR,CAAJ;AAAA,OAA1B,CAAhB;AACAV,MAAAA,SAAS,CAACK,MAAM,CAACC,GAAR,CAAT,CAAsBD,MAAM,CAACE,MAA7B,IAAuC,KAAKR,KAAL,CAAWG,MAAlD;AAEA,UAAMA,MAAM,GAAG,KAAKH,KAAL,CAAWG,MAAX,KAAsB,GAAtB,GAA4B,GAA5B,GAAkC,GAAjD;AACA,UAAMD,MAAM,GAAGT,KAAK,CAACQ,SAAD,CAApB;AACA,UAAMG,KAAK,GAAGF,MAAM,KAAK,GAAX,GAAiBF,KAAK,CAACI,KAAN,GAAc,CAA/B,GAAmCJ,KAAK,CAACI,KAAvD;AACA,UAAMC,KAAK,GAAGH,MAAM,KAAK,GAAX,GAAiBF,KAAK,CAACK,KAAN,GAAc,CAA/B,GAAmCL,KAAK,CAACK,KAAvD;AAEA,+BAAW,KAAKL,KAAhB;AAAuBG,QAAAA,MAAM,EAANA,MAAvB;AAA+BD,QAAAA,MAAM,EAANA,MAA/B;AAAuCD,QAAAA,SAAS,EAATA,SAAvC;AAAkDG,QAAAA,KAAK,EAAEA,KAAzD;AAAgEC,QAAAA,KAAK,EAAEA;AAAvE;AACH;;;6BAEQ;AACL,aACI,oBAAC,UAAD,CAAY,QAAZ;AAAqB,QAAA,KAAK,EAAE;AAACL,UAAAA,KAAK,EAAE,KAAKA,KAAb;AAAoBF,UAAAA,QAAQ,EAAE,KAAKA;AAAnC,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKD,KAAL,CAAWe,QADhB,CADJ;AAKH;;;;EAtCoCtB,KAAK,CAACuB,S,GAyC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;SAtEqBjB,W","sourcesContent":["import React from 'react';\nimport {emptyBoard, NONE, score} from \"./helpers\";\n\nexport const AppContext = React.createContext();\n\nexport default class AppProvider extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.takeTurn = this.takeTurn.bind(this)\n\n        this.state = {\n            gameBoard: emptyBoard,\n            winner: null,\n            player: 'X',\n            xWins: 0,\n            oWins: 0,\n        };\n    }\n\n\n    takeTurn(action) {\n        if (this.state.winner || this.state.gameBoard[action.row][action.square] !== NONE)\n            return this.state;\n\n        // clone the array so we don't mutate the existing state\n        let gameBoard = this.state.gameBoard.map(r => r.slice(0));\n        gameBoard[action.row][action.square] = this.state.player;\n\n        const player = this.state.player === 'X' ? 'O' : 'X';\n        const winner = score(gameBoard);\n        const xWins = winner === 'X' ? state.xWins + 1 : state.xWins;\n        const oWins = winner === 'O' ? state.oWins + 1 : state.oWins;\n\n        return {...this.state, player, winner, gameBoard, xWins: xWins, oWins: oWins};\n    }\n\n    render() {\n        return (\n            <AppContext.Provider value={{state: this.state, takeTurn: this.takeTurn}}>\n                {this.props.children}\n            </AppContext.Provider>\n        );\n    }\n}\n\n//const defaultState = {\n//   gameBoard: emptyBoard,\n//   winner: null,\n//   player: 'X',\n//   xWins: 0,\n//   oWins: 0,\n// };\n//\n// export default function gameState(state = defaultState, action) {\n//   switch (action.type) {\n//     case TAKE_TURN:\n//       if (state.winner || state.gameBoard[action.row][action.square] !== NONE)\n//         return state;\n//\n//       // clone the array so we don't mutate the existing state\n//       let gameBoard = state.gameBoard.map(r => r.slice(0));\n//       gameBoard[action.row][action.square] = state.player;\n//\n//       const player = state.player === 'X' ? 'O' : 'X';\n//       const winner = score(gameBoard);\n//       const xWins = winner === 'X' ? state.xWins + 1 : state.xWins;\n//       const oWins = winner === 'O' ? state.oWins + 1 : state.oWins;\n//\n//       return {...state, player, winner, gameBoard, xWins: xWins, oWins: oWins};\n//     case RESET_GAME:\n//       return {...state, gameBoard: emptyBoard, winner: null};\n//     default:\n//       return state;\n//   }\n// }"]},"metadata":{},"sourceType":"module"}