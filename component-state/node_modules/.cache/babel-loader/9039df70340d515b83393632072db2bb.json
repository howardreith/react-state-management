{"ast":null,"code":"import _defineProperty from \"/home/howardreith/workspace/redux-demo/component-state/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _turnValuePrimes;\n\nexport var NONE = '-';\nexport var DRAW = 'D';\nexport var emptyBoard = [[NONE, NONE, NONE], [NONE, NONE, NONE], [NONE, NONE, NONE]];\nvar turnValuePrimes = (_turnValuePrimes = {}, _defineProperty(_turnValuePrimes, NONE, 0), _defineProperty(_turnValuePrimes, \"X\", 3), _defineProperty(_turnValuePrimes, \"O\", 7), _turnValuePrimes);\nvar X_WIN_TOTAL = turnValuePrimes.X * 3;\nvar O_WIN_TOTAL = turnValuePrimes.O * 3;\n\nvar mapToPrimes = function mapToPrimes(gameBoard) {\n  return gameBoard.map(function (r) {\n    return r.map(function (s) {\n      return turnValuePrimes[s];\n    });\n  });\n};\n\nvar flatMapPossibleWins = function flatMapPossibleWins(primes) {\n  // row sums\n  var sums = primes.map(function (r) {\n    return r.reduce(function (total, current) {\n      return total + current;\n    });\n  }); // column sums\n\n  sums = sums.concat(primes.map(function (row, col_index) {\n    return row.reduce(function (total, current, row_index) {\n      return total + primes[row_index][col_index];\n    }, 0);\n  })); // diagonal sums\n\n  sums = sums.concat([primes[0][0] + primes[1][1] + primes[2][2], primes[0][2] + primes[1][1] + primes[2][0]]);\n  return sums;\n};\n\nexport function score(gameBoard) {\n  var primes = mapToPrimes(gameBoard);\n  var flatPrimes = primes.flatMap(function (row) {\n    return row.map(function (column) {\n      return column;\n    });\n  });\n  var possilbeWins = flatMapPossibleWins(primes);\n  if (possilbeWins.some(function (r) {\n    return r === X_WIN_TOTAL;\n  })) return 'X';else if (possilbeWins.some(function (r) {\n    return r === O_WIN_TOTAL;\n  })) return 'O';else if (flatPrimes.every(function (m) {\n    return m !== 0;\n  })) return DRAW;else return null;\n}","map":{"version":3,"sources":["/home/howardreith/workspace/redux-demo/component-state/src/helpers.js"],"names":["NONE","DRAW","emptyBoard","turnValuePrimes","X_WIN_TOTAL","X","O_WIN_TOTAL","O","mapToPrimes","gameBoard","map","r","s","flatMapPossibleWins","primes","sums","reduce","total","current","concat","row","col_index","row_index","score","flatPrimes","flatMap","column","possilbeWins","some","every","m"],"mappings":"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","sourcesContent":["export const NONE = '-';\nexport const DRAW = 'D';\nexport const emptyBoard = [\n  [NONE, NONE, NONE],\n  [NONE, NONE, NONE],\n  [NONE, NONE, NONE],\n];\n\nconst turnValuePrimes = {\n  [NONE]: 0,\n  X: 3,\n  O: 7,\n};\n\nconst X_WIN_TOTAL = turnValuePrimes.X * 3;\nconst O_WIN_TOTAL = turnValuePrimes.O * 3;\n\nconst mapToPrimes = gameBoard =>\n  gameBoard.map(r => r.map(s => turnValuePrimes[s]));\n\nconst flatMapPossibleWins = primes => {\n  // row sums\n  let sums = primes.map(r => r.reduce((total, current) => total + current));\n\n  // column sums\n  sums = sums.concat(\n    primes.map((row, col_index) =>\n      row.reduce(\n        (total, current, row_index) => total + primes[row_index][col_index],\n        0,\n      ),\n    ),\n  );\n\n  // diagonal sums\n  sums = sums.concat([\n    primes[0][0] + primes[1][1] + primes[2][2],\n    primes[0][2] + primes[1][1] + primes[2][0],\n  ]);\n\n  return sums;\n};\n\nexport function score(gameBoard) {\n  const primes = mapToPrimes(gameBoard);\n  const flatPrimes = primes.flatMap(row => row.map(column => column));\n  const possilbeWins = flatMapPossibleWins(primes);\n\n  if (possilbeWins.some(r => r === X_WIN_TOTAL)) return 'X';\n  else if (possilbeWins.some(r => r === O_WIN_TOTAL)) return 'O';\n  else if (flatPrimes.every(m => m !== 0)) return DRAW;\n  else return null;\n}\n"]},"metadata":{},"sourceType":"module"}